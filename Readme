## 🛒 **E-commerce Microservices Application**
This is a **microservices-based** e-commerce application built with **Spring Boot (backend)** and **React.js (frontend)**. It allows users to **browse products, add to cart, and place orders**.

---

## 📌 **Features**
✅ **User Authentication** (Signup/Login)  
✅ **Product Management** (View, Search)  
✅ **Shopping Cart** (Add/Remove Items)  
✅ **Order Processing**  
✅ **Microservices Architecture**  
✅ **Spring Boot + React Integration**  

---

## 🏗️ **Tech Stack**
### 🔹 Backend:
- **Java (Spring Boot)**
- **Spring Data JPA**
- **Spring Security (for authentication)**
- **MySQL** (Database)
- **Eureka** (Service Discovery)
- **Spring Cloud Gateway** (API Gateway)

### 🔹 Frontend:
- **React.js**
- **Redux (State Management)**
- **Axios (API Calls)**
- **Bootstrap** (UI)

---

## 🚀 **Installation & Setup**
### 1️⃣ **Clone the Repository**
```sh
git clone https://github.com/your-repo/ecommerce-microservices.git
cd ecommerce-microservices
```

---

### 2️⃣ **Setup Backend**
#### 📌 **Create Database**
Open MySQL and run:
```sql
CREATE DATABASE ecommerce_db;
```

#### 📌 **Configure `application.properties`**
Modify `backend/user-service/src/main/resources/application.properties`:

```
spring.datasource.url=jdbc:mysql://localhost:3306/ecommerce_db
spring.datasource.username=root
spring.datasource.password=password
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.hibernate.ddl-auto=update
```

#### 📌 **Run Backend Services**
Open separate terminals and run:

```sh
cd backend/user-service
mvn spring-boot:run
```

```sh
cd backend/product-service
mvn spring-boot:run
```

```sh
cd backend/order-service
mvn spring-boot:run
```

```sh
cd backend/gateway-service
mvn spring-boot:run
```

---

### 3️⃣ **Setup Frontend**
#### 📌 **Install Dependencies**
```sh
cd frontend
npm install
```

#### 📌 **Run Frontend**
```sh
npm start
```

The app should be running at:  
👉 **http://localhost:3000**

---

## 🔥 **API Endpoints**
| Method | Endpoint               | Description              |
|--------|------------------------|--------------------------|
| GET    | `/api/products`        | Get all products        |
| GET    | `/api/products/{id}`   | Get product by ID       |
| POST   | `/api/orders`          | Place an order         |
| GET    | `/api/orders/{userId}` | Get user orders        |

---

## 📦 **Build & Deployment**
### 📌 **Build Frontend**
```sh
npm run build
```

### 📌 **Serve with Spring Boot**
Move `frontend/build/` to `backend/gateway-service/static/` and modify `application.properties`:

```
spring.web.resources.static-locations=classpath:/static/
```

### 📌 **Run Everything**
```sh
mvn package && java -jar target/gateway-service.jar
```

---

## 👨‍💻 **Contributing**
1. Fork the repo 🍴  
2. Create a new branch `git checkout -b feature-name`  
3. Commit changes `git commit -m "Added new feature"`  
4. Push and create a Pull Request ✅  

---

## ⚡ **Troubleshooting**
### 🔹 Backend Errors?
- Check logs:  
  ```sh
  tail -f logs/spring.log
  ```
- Ensure MySQL is running

### 🔹 Frontend Not Connecting?
- Verify `REACT_APP_API_URL` in `.env`  
- Restart backend services  

---

## 📜 **License**
This project is **open-source** and licensed under the **MIT License**.

---

## 🚀 **Next Steps**
- ✅ **Add Authentication (Login/Signup)**
- ✅ **Deploy on AWS/DigitalOcean**
- ✅ **Improve UI Design**